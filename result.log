import io.cucumber.core.backend.ObjectFactory;
import org.picocontainer.DefaultPicoContainer;
import org.picocontainer.MutablePicoContainer;

public class PicoObjectFactory implements ObjectFactory {

    private final MutablePicoContainer container;

    public PicoObjectFactory() {
        container = new DefaultPicoContainer();
    }

    @Override
    public void start() {
        // No-op
    }

    @Override
    public void stop() {
        // No-op
    }

    @Override
    public boolean addClass(Class<?> aClass) {
        container.addComponent(aClass);
        return true;
    }

    @Override
    public <T> T getInstance(Class<T> aClass) {
        return container.getComponent(aClass);
    }
}


import io.cucumber.core.backend.ObjectFactory;
import io.cucumber.java8.En;
import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(
        features = "src/test/resources/features",
        glue = {"stepdefinitions"},
        plugin = {"pretty"}
)
public class RunCucumberTest implements En {

    static {
        io.cucumber.core.backend.ObjectFactoryServiceLoader.setObjectFactory(() -> new PicoObjectFactory());
    }
}
