import io.cucumber.core.backend.ObjectFactory;
import org.picocontainer.DefaultPicoContainer;
import org.picocontainer.MutablePicoContainer;

public class PicoObjectFactory implements ObjectFactory {

    private final MutablePicoContainer container;

    public PicoObjectFactory() {
        container = new DefaultPicoContainer();
    }

    @Override
    public void start() {
        // No-op
    }

    @Override
    public void stop() {
        // No-op
    }

    @Override
    public boolean addClass(Class<?> aClass) {
        container.addComponent(aClass);
        return true;
    }

    @Override
    public <T> T getInstance(Class<T> aClass) {
        return container.getComponent(aClass);
    }
}


import io.cucumber.core.backend.ObjectFactory;
import io.cucumber.java8.En;
import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(
        features = "src/test/resources/features",
        glue = {"stepdefinitions"},
        plugin = {"pretty"}
)
public class RunCucumberTest implements En {

    static {
        io.cucumber.core.backend.ObjectFactoryServiceLoader.setObjectFactory(() -> new PicoObjectFactory());
    }
}

#POJO
{
  "fees": [
    {
      "id": 1200006305
    }
  ],
  "feeCategoryId": 672
}

private List<Fee> fees;
    private int feeCategoryId;

    public List<Fee> getFees() {
        return fees;
    }

    public void setFees(List<Fee> fees) {
        this.fees = fees;
    }

    public int getFeeCategoryId() {
        return feeCategoryId;
    }

    public void setFeeCategoryId(int feeCategoryId) {
        this.feeCategoryId = feeCategoryId;
    }

    public static class Fee {
        private long id;

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }
    }
